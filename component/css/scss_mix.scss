@mixin wrapper_spacing($width: 10px, $attribute: margin){
    #{$attribute}-left: $width;
    #{$attribute}-right: $width;
}
@mixin overflowellipsis(){
    word-wrap: normal;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}
@mixin aDefault(){
    a{
        color: inherit;
        text-decoration: none;
    }
}
@mixin background($url, $bgsize: (100% 100%), $repeat: no-repeat, $bgcolor: transparent){
    background: $bgcolor url($url) $repeat;
    background-size: $bgsize;
}
@function R($rem) {
    @return $rem / 640 * 3.2 * 1rem;
}
/** when rgba float on rgb, get the mix color */
@function minxRgba($c1, $c2){
    @return rgb(
        red($c1) * opacity($c2) * opacity($c1) + red($c2) * opacity($c1),
        green($c1) * opacity($c2) * opacity($c1) + green($c2) * opacity($c1),
        blue($c1) * opacity($c2) * opacity($c1) + blue($c2) * opacity($c1)
    );
}
.layout_spaces_list{
    ul{
        padding: 0;
        margin: 0;
        list-style-type: none;
        font-size: 0;
        >li{
            display: inline-block;
            font-size: initial;
            width: 100%;
            position: relative;
        }
    }
}
@for $i from 1 through 10 { 
    .layout_spaces_listX#{$i}{
        @extend .layout_spaces_list;
        ul > li{
            width: 1 / $i * 100%;
        }
    } 
}
.layout_table{
    display: table;
    width: 100%;
    .col{
        vertical-align: top;
        display: table-cell;
        position: relative;
        &.left{
            float: left;
        }
        &.right{
            float: right;
        }
    }
    
    @for $i from 1 through 10 {
        @for $j from 1 through $i { 
            .colX#{$i}_#{$j}{
                @extend .col;
                width: $j / $i *100%;
                
            }
        }
    }
}